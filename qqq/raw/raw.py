#!/usr/bin/env python
# -*- coding: utf-8 -*-
#日本語　あああ防伪标志
import codecs
import binascii
import struct
import array
from PIL import Image
data=b''
xtf_header=data[:2048]#预处理数据的帧头和xtf数据的帧头是一样的
xtf_header_file=xtf_header[0:2]#开头一般都是7b
xtf_header_system=xtf_header[2:4]#系统类型，一般设置为1
xtf_header_ProgramName=xtf_header[4:20]#这段字符是程序名字，把这一段从16进制转为string类型
Name1=int(xtf_header_ProgramName,16)
Name2=hex(Name1)[2:]
Name3=binascii.unhexlify(Name2).decode()#把名字的16进制流转换成字符串并显示,后面流程相同
print('ProgramName:'+Name3)
xtf_header_PR=xtf_header[20:36]#记录程序版本号
Version1=int(xtf_header_PR,16)
Version2=hex(Version1)[2:]
Version3=binascii.unhexlify(Version2).decode()
print('Version:'+Version3)
xtf_header_Sonar=xtf_header[36:68]#记录声呐名称
Sonar1=int(xtf_header_Sonar,16)
Sonar2=hex(Sonar1)[2:]
Sonar3=binascii.unhexlify(Sonar2).decode()
print('Sonar Name:'+Sonar3)
xtf_WordSonarType=xtf_header[68:72]#一个我也不知道什么意思的字段，根据解析结果查表可得到对应的类型,我们的声呐一般都是默认为0
Word1=str(int(xtf_WordSonarType,16))
print('WordSonarType:'+Word1)
xtf_NoteString=xtf_header[72:200]#相当于一个备忘录内容,但是这里全都是0，所以这里不做进一步的解析了
Notestring1=int(xtf_NoteString,16)
if Notestring1==0:#判断是否为0，为0就会报错
    print("Note:There is no memory")
else:
    Notestring2=hex(Notestring1)[2:]
    Notestring3=binascii.unhexlify(Notestring2).decode()
    print('Note:'+xtf_NoteString)
xtf_FileName=xtf_header[200:328]#xtf文件名，不知道这里为什么会有超出范围无法解析的
#print(xtf_FileName)
FileName1=int(xtf_FileName,16)
if FileName1!=0:
    FileName2=hex(FileName1)[2:]
    FileName3=binascii.unhexlify(FileName2).decode('utf-8','ignore')
    print("file name:"+FileName3)
xtf_NavUnits=xtf_header[328:332]#航行单位，这里开始小段存储了，需要颠倒一下位置
Nav1=xtf_NavUnits[0:2]
Nav2=xtf_NavUnits[2:4]
Nav3=int((Nav2+Nav1),16)
if Nav3==0:
    print('NavUnits:Metres')
if Nav3==3:
    print('NavUnits:Lat/Long')
xtf_SonarChannel=xtf_header[332:336]#我们的声呐一共有几个通道，如果大于6个通道则header要延长
Channel=int((xtf_SonarChannel[2:4]+xtf_SonarChannel[0:2]),16)
Channel1=str(Channel)
print('Channel Number:'+Channel1)
if Channel>6:
    xtf_header=xtf_header+data[2048:4096]
xtf_BathChannel=xtf_header[336:340]
#print(xtf_BathChannel)
BathChannel=int((xtf_BathChannel[2:4]+xtf_BathChannel[0:2]),16)
BathChannel1=str(BathChannel)
print('BathymetryChannels Nmuber:'+BathChannel1)#下面的具体功能暂时先不实现，先把这些字段拆分保留
xtf_SnippetChannel=xtf_header[340:342]

xtf_FowardLookArrays=xtf_header[342:344]

xtf_ESC=xtf_header[344:348]

xtf_IC=xtf_header[348:350]

xtf_R1=xtf_header[350:352]
xtf_R2=xtf_header[352:356]

xtf_PointHeight=xtf_header[356:364]
#print(xtf_PointHeight)

xtf_ProjectionType=xtf_header[364:388]
xtf_SpheriodType=xtf_header[388:408]
xtf_NL=xtf_header[408:416]
#print(xtf_NL)
xtf_OriginY=xtf_header[416:424]
xtf_OriginX=xtf_header[424:432]
xtf_NavOffsetY=xtf_header[432:440]
#print(xtf_NavOffsetY)
xtf_NavOffsetX=xtf_header[440:448]
xtf_NavOffsetZ=xtf_header[448:456]
xtf_NavOffsetYaw=xtf_header[456:464]
xtf_MRUOOffsetY=xtf_header[464:472]
xtf_MRUOOffsetX=xtf_header[472:480]
xtf_MRUOOffsetZ=xtf_header[480:488]
xtf_MRUOOffsetYaw=xtf_header[488:496]
xtf_MRUOOffsetOffsetPitch=xtf_header[496:504]
xtf_MRUOOffsetOffsetRoll=xtf_header[504:512]
#这里开始解析的是每个通道的数据
data_channel1=xtf_header[512:768]
data_channel2=xtf_header[768:1024]
data_channel3=xtf_header[1024:1280]
data_channel4=xtf_header[1280:1536]
data_channel5=xtf_header[1536:1792]
data_channel6=xtf_header[1792:2048]
#因为只有两个通道 3-6的数据都为0,这里还是把所有的都拆分出来
#从下面开始解析通道1
Channel1_Type=int(data_channel1[0:2],16)
if Channel1_Type==1:
    print('channel1Type: PORT')
if Channel1_Type==0:
    print('channel1Type: SUBBOTTOM')
if Channel1_Type==2:
     print('channel1Type: STBD')
if Channel1_Type==3:
     print('channel1Type: BATHYMETRY')
Channel1_SubChannelNumber=int(data_channel1[2:4])
Channel1_Flag=data_channel1[4:8]#1=以倾斜距离存储的声纳图像，2=以地面距离存储的声纳图像(校正后)
Flag=int((Channel1_Flag[2:4]+Channel1_Flag[0:2]),16)
if Flag==1:
    print("channel1flag: sonar imagery stored as slant-range")
if Flag==2:
    print("channel1flag:sonar imagery stored as ground range ")
Channel1_UniPolar=data_channel1[8:12]#0=data为极性，1=data为单极性
Polar=int((Channel1_UniPolar[2:4]+Channel1_UniPolar[0:2]),16)
if Polar==0:
    print("channel1's data is polar")
if Polar==1:
    print("channel1's data is unpolar")
Channel1_BytesPerSample=data_channel1[12:16]
BytesPerSample=int((Channel1_BytesPerSample[2:4]+Channel1_BytesPerSample[0:2]),16)
if BytesPerSample==1:
    print("channel1 8-bit data")
if BytesPerSample==2:
    print("channel1 16-bit data")
if BytesPerSample==4:
    print("channel1 32-bit data")
Channel_Reserved=data_channel1[16:24]
Channel_Name=data_channel1[24:56]
CName1=int(Channel_Name,16)
CName2=hex(CName1)[2:]
CName3=binascii.unhexlify(CName2).decode()
print('Channel1Name:'+CName3)
Channel_Volt=str(data_channel1[56:64])
Volt1=Channel_Volt[2:-1]
Volt2=bytes.fromhex(Volt1)
Volt3=struct.unpack('f',Volt2)[0]
Volt4='{:.4f}'.format(Volt3)
print(Volt4)
Channel1_Fre=str(data_channel1[64:72])
Fre1=Channel1_Fre[2:-1]
Fre2=bytes.fromhex(Fre1)
Fre3=struct.unpack('f',Fre2)[0]
Fre4=str('{:.4f}'.format(Fre3))
print('Channel1 Center transmit frequency: '+Fre4)
Channel1_Ang=str(data_channel1[72:80])
Ang1=Channel1_Ang[2:-1]
Ang2=bytes.fromhex(Ang1)
Ang3=struct.unpack('f',Ang2)[0]
Ang4=str('{:.4f}'.format(Ang3))
print('Channel1 HorizonBeamAngle: '+Ang4)
Channel1_tAng=str(data_channel1[80:88])
tAng1=Channel1_tAng[2:-1]
tAng2=bytes.fromhex(tAng1)
tAng3=struct.unpack('f',tAng2)[0]
tAng4=str('{:.4f}'.format(tAng3))
print('Channel1 TiltAngle: '+tAng4)#这些都是默认值，这个数据中有很多xtf字段没有用到
Channel1_BeamWidth=str(data_channel1[88:96])#波束宽度
#print(Channel1_BeamWidth)
BeamWidth1=Channel1_BeamWidth[2:-1]
BeamWidth2=bytes.fromhex(BeamWidth1)
BeamWidth3=struct.unpack('f',BeamWidth2)[0]
BeamWidth4=str('{:.4f}'.format(BeamWidth3))
print('Channel1 BeamWidth: '+BeamWidth4)
Channel1_OffsetX=str(data_channel1[96:104])
Channel1_OffsetY=str(data_channel1[104:112])
Channel1_OffsetZ=str(data_channel1[112:120])
Channel1_OffsetYaw=str(data_channel1[120:128])
Channel1_OffsetPitch=str(data_channel1[128:136])
Channel1_OffsetRoll=str(data_channel1[136:144])
Channel1_BeamPerArray=data_channel1[144:148]
Channel1_SampleFormat=data_channel1[148:150]
Channel1_ReservedArea=data_channel1[150:256]
#print(Channel1_ReservedArea)
print(len(data))


#从下面开始解析帧头
xtf_pingheader=data[2048:2560]#提取帧头
pingheader_MagicNum=xtf_pingheader[0:4]#pingheader的标志位，这里也是倒序存储
pingheader_HeaderType=xtf_pingheader[4:6]#标明是哪种类型的数据，这里的数据是0，表示下面存储的数据属于声呐数据
#print(xtf_pingheader)
pingheader_SubCN=xtf_pingheader[6:8]#bathmetry才需要用到的字段
pingheader_NumChan=xtf_pingheader[8:12]#标明声呐有几个通道
NumChan1=int((pingheader_NumChan[2:4]+pingheader_NumChan[0:2]),16)
NumChan2=str(NumChan1)
print('Sonar Channel Number:'+NumChan2)
#print(pingheader_NumChan)
pingheader_Reserved=xtf_pingheader[12:20]
pingheader_NumBytes=xtf_pingheader[20:28]
NumBytes1=int((pingheader_NumBytes[6:8]+pingheader_NumBytes[4:6]+pingheader_NumBytes[2:4]+pingheader_NumBytes[0:2]),16)
NumBytes2=str(NumBytes1)
print('Total data bytes: '+NumBytes2)
Year=xtf_pingheader[28:32]
Year1=int(Year[2:4]+Year[0:2],16)
Year2=str(Year1)
Month=xtf_pingheader[32:34]
Month1=str(int(Month,16))
Day=xtf_pingheader[34:36]
Day1=str(int(Day,16))
Hour=xtf_pingheader[36:38]
Hour1=str(int(Hour,16))
Minute=xtf_pingheader[38:40]
Minute1=str(int(Minute,16))
Second=xtf_pingheader[40:42]
Second1=str(int(Second,16))
HSecond=xtf_pingheader[42:44]
HSecond1=str(int(HSecond,16))
print('Time: '+Year2+'-'+Month1+'-'+Day1+' '+Hour1+':'+Minute1+':'+Second1+':'+HSecond1)
pingheader_EventNum=xtf_pingheader[48:56]
pingheader_PingNUm=xtf_pingheader[56:64]
PingNum=str(int((pingheader_PingNUm[6:8]+pingheader_PingNUm[4:6]+pingheader_PingNUm[2:4]+pingheader_PingNUm[0:2]),16))
print('Ping Number: '+PingNum)
#这里列出部分字段，但是这里的声呐都没有用到，所以不在这里浪费时间进行切分
pingheader_SoundV=xtf_pingheader[64:72]#声速，太大了，先搁置
pingheader_OceanT=xtf_pingheader[72:80]
pingheader_Reser=xtf_pingheader[80:88]
pingheader_ConFre=xtf_pingheader[88:96]
pingheader_TemPre=xtf_pingheader[96:104]
pingheader_PreFre=xtf_pingheader[104:112]
pingheader_PreTemp=xtf_pingheader[112:120]
pingheader_Conduc=xtf_pingheader[120:128]
pingheader_WaterTem=xtf_pingheader[128:136]
pingheader_Pressure=xtf_pingheader[136:144]
pingheader_ComSV=xtf_pingheader[144:152]
pingheader_MagX=xtf_pingheader[152:160]
pingheader_MagY=xtf_pingheader[160:168]
pingheader_MagZ=xtf_pingheader[168:176]
pingheader_AuvVal1=xtf_pingheader[176:184]
pingheader_AuvVal2=xtf_pingheader[184:192]
pingheader_AuvVal3=xtf_pingheader[192:200]
pingheader_AuvVal4=xtf_pingheader[200:208]
pingheader_AuvVal5=xtf_pingheader[208:216]
pingheader_AuvVal6=xtf_pingheader[216:224]
pingheader_Speed=xtf_pingheader[224:232]
pingheader_Turbi=xtf_pingheader[232:240]
pingheader_ShipS=xtf_pingheader[240:248]
pingheader_ShipGyro=xtf_pingheader[248:256]
pingheader_SensorAux=xtf_pingheader[392:400]#唯一一个不为零的地方，但是不知道有什么用
#print(pingheader_SensorAux)


#下面开始解析每一个通道的数据,首先解析通道头，然后根据通道头解析数据
ping_channel1head=data[2560:2688]
channelhead_NumSam=ping_channel1head[84:92]
NumSam1=int((channelhead_NumSam[6:8]+channelhead_NumSam[4:6]+channelhead_NumSam[2:4]+channelhead_NumSam[0:2]),16)
print(NumSam1)
Bytes2=NumSam1*BytesPerSample
ping_channel1Data=data[2688:2688+Bytes2*2]
#print(ping_channel1Data)


b=[]
i=0
for i in range(0,Bytes2*2,4):#先按照小端读取数据尝试读取
    b.append(int((ping_channel1Data[i+2:i+4]+ping_channel1Data[i:i+2]),16))
print(b)
Gmax=max(b)
Gmin=min(b)
print(Gmax)
print(Gmin)
j=0
a=[]
for j in range(0,len(b)-1,1):
    a.append(int((b[j]-Gmin)*255/(Gmax-Gmin)))#将声波强度数据转换为灰度图数据
print(a)
width=len(b)
height=1
# 创建一个新的灰度图像对象
image = Image.new("L", (width, height))

# 将灰度数据赋值给图像的像素
image.putdata(a)

# 显示图像
image.save("test.bmp")
